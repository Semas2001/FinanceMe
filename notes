class StatisticsPage(Screen):
    def __init__(self, **kwargs):
        super(StatisticsPage, self).__init__(**kwargs)
        self.graph = None
        self.plot = None  # Add plot attribute
        self.total_revenue_label = None  # Add total revenue label attribute

    def on_enter(self):
        if not self.graph:
            self.initialize_graph()

    def initialize_graph(self):
        # Initialize the graph and other widgets
        self.graph = self.ids.graph
        if self.graph:
            self.plot = MeshLinePlot(color=[1, 0, 0, 1])
            self.graph.add_plot(self.plot)
            self.total_revenue_label = Label(halign='center', valign='middle', font_size=24)
            self.add_widget(self.total_revenue_label)

    def update_graph(self, new_total_revenue, formatted_datetime):
        if self.plot:
            # Update the graph
            formatted_date = datetime.strptime(formatted_datetime, "%Y-%m-%d").toordinal()
            self.plot.points.append((formatted_date, new_total_revenue))
            self.plot.points.sort(key=lambda x: x[0])

            # Update x-axis ticks
            self.graph.x_ticks = [x[0] for x in self.plot.points]
            self.graph.x_ticks_major = len(self.graph.x_ticks)
            self.graph.x_ticks_minor = 5  # Adjust as needed

            # Update y-axis ticks
            max_revenue = max([point[1] for point in self.plot.points])
            self.graph.y_ticks_major = total_revenue // 10  # Adjust as needed
            self.graph.y_ticks_minor = 5  # Adjust as needed